import{j as s}from"./index-B2MRwfjw.js";import{I as e}from"./algorithmPageStyle-Bpj0BEPT.js";import{l as r}from"./leetcode_img-C1Ln_u7n.js";const i="/algorithm_learning/assets/queue_operations-CbdAPiKk.png",x=()=>s.jsxs("div",{className:"full_page",children:[s.jsx("div",{className:"title",children:"對列(佇列)"}),s.jsxs("div",{className:"introduce",children:[s.jsxs("div",{className:"diagrambox",children:[s.jsx("p",{children:"圖解"}),s.jsx("p",{className:"diagram",children:s.jsx(e,{src:i,alt:"棧圖"})})]}),s.jsxs("div",{children:[s.jsx("p",{children:"遵循原則"}),s.jsxs("p",{children:["先進先出",s.jsx("br",{}),"進:添加,出:刪除",s.jsx("br",{}),"比如排隊買飯先排得先買好出去",s.jsx("br",{})]})]}),s.jsxs("div",{children:[s.jsx("p",{children:"思路"}),s.jsxs("p",{children:["let arr = []",s.jsx("br",{}),"arr.push(1);",s.jsx("br",{}),"arr.push(2);",s.jsx("br",{}),"會得到[1,2]",s.jsx("br",{}),"arr.shift()",s.jsx("br",{}),"會得到[2]",s.jsx("br",{}),"同步異步也遵循此原則",s.jsx("br",{})]})]}),s.jsxs("div",{children:[s.jsx("p",{children:"補充 Js中的任務對列"}),s.jsxs("p",{children:["Js語言的特點就是",s.jsx("b",{children:"單線程"}),",也就是說同一時間只能做一件事情,那為什麼Js不能有多線程?該如何提升效率. 作為瀏覽器的腳本語言,主要用途是與用戶互動,以及操作DOM,這決定了它只能是單線程,否則會帶來複雜的同步問題.假定js同時有兩線程,一個線程在某個Dom結點添加內容,另一個線程刪除這個結點,那瀏覽器該以哪個線程為主.",s.jsx("br",{}),"同步、異步:定時器、事件、請求"]})]})]}),s.jsx("br",{}),s.jsx("div",{className:"Detailed_introduction",children:s.jsxs("div",{children:[s.jsx("p",{children:s.jsx("a",{href:"https://leetcode.com/problems/number-of-recent-calls/description/",children:"Leetcode第933題"})}),s.jsx("p",{children:s.jsx(e,{src:r.leetcode933,alt:""})})]})})]});export{x as default};
