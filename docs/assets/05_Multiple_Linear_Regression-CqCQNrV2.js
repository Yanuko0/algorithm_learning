import{j as e}from"./index-BK3mFozj.js";/* empty css                           */import{a as n}from"./ai_img-DywI196L.js";import{I as r}from"./index-DDKioi74.js";const x=()=>e.jsxs("div",{className:"full_page",children:[e.jsx("div",{className:"title",children:"多元線性回歸"}),e.jsxs("p",{children:["根據歷史數據訓練模型, 未來預測具體數值的任務就是回歸任務",e.jsxs("ul",{children:[e.jsx("li",{children:"股票價格預測"}),e.jsx("li",{children:"房價預判(影響因素:房屋面積、臥室數、房間數、車庫數等)"}),e.jsx("li",{children:"銷售量預測"}),e.jsx("li",{children:"貸款違約率預測"})]}),"多元線性回歸就是眾多回歸算法中的一個, 也是最基礎的一個"]}),e.jsxs("div",{className:"introduce",children:[e.jsxs("div",{className:"diagrambox",children:[e.jsx("p",{children:"何為多元? 多個維度 multi dimensionality"}),e.jsx("p",{className:"diagram",children:e.jsx("div",{className:"commentaryBox",children:e.jsx(r.PreviewGroup,{preview:{onChange:(s,i)=>console.log(`current index: ${s}, prev index: ${i}`)},children:e.jsx(r,{src:n.multi_dimensionality,alt:"multi_dimensionality"})})})}),e.jsx("p",{children:"更高的維度很難繪製出來; 不過我們可以思考一下我們生活的世界是幾維空間? 其實隨時隨地都能在腦海中構建一個多維空間,比如房屋的售價取決於很多因素,比如面積、臥室數、浴室數、車庫數等 可以想像成影響一件事情的因素，有很多個。"})]}),e.jsxs("div",{children:[e.jsx("p",{children:"何為線性? 二維空間: 直線"}),e.jsx("p",{className:"diagram",children:e.jsx("div",{className:"commentaryBox",children:e.jsx(r.PreviewGroup,{preview:{onChange:(s,i)=>console.log(`current index: ${s}, prev index: ${i}`)},children:e.jsx(r,{src:n.線性與空間,alt:"線性與空間"})})})}),e.jsx("p",{children:'更高維度空間中呈現出來的"線性體", 我們統稱維超平面hyper plane'})]})]}),e.jsxs("div",{className:"introduce",children:[e.jsxs("div",{className:"diagrambox",children:[e.jsx("p",{children:"何為回歸? 回歸就是擬合"}),e.jsx("p",{className:"diagram",children:e.jsx("div",{className:"commentaryBox",children:e.jsx(r.PreviewGroup,{preview:{onChange:(s,i)=>console.log(`current index: ${s}, prev index: ${i}`)},children:e.jsx(r,{src:n.回歸,alt:"回歸"})})})})]}),e.jsxs("div",{children:[e.jsx("p",{children:"何為線性? 二維空間: 直線"}),e.jsx("p",{className:"diagram",children:e.jsx("div",{className:"commentaryBox",children:e.jsx(r.PreviewGroup,{preview:{onChange:(s,i)=>console.log(`current index: ${s}, prev index: ${i}`)},children:e.jsx(r,{src:n.線性與空間,alt:"線性與空間"})})})}),e.jsx("p",{children:'更高維度空間中呈現出來的"線性體", 我們統稱維超平面hyper plane'}),e.jsx("p",{children:"三維世界的非線性回歸"}),e.jsx("p",{className:"diagram",children:e.jsx("div",{className:"commentaryBox",children:e.jsx(r.PreviewGroup,{preview:{onChange:(s,i)=>console.log(`current index: ${s}, prev index: ${i}`)},children:e.jsx(r,{src:n.非線性回歸,alt:"非線性回歸"})})})}),e.jsx("p",{children:"綜上所述, 多元線性回歸就是在多元世界(多維空間)中使用線性體(直線、平面、超平面)對已有數據點(歷史數據)進行擬合的一種方式方法(算法or函數)"})]}),e.jsxs("div",{children:[e.jsx("p",{children:"線性回歸公式(算法表達式)"}),e.jsx("p",{className:"diagram",children:e.jsx("div",{className:"commentaryBox",children:e.jsx(r.PreviewGroup,{preview:{onChange:(s,i)=>console.log(`current index: ${s}, prev index: ${i}`)},children:e.jsx(r,{src:n.線性回歸公式,alt:"線性回歸公式"})})})}),e.jsx("p",{children:e.jsxs("ul",{children:[e.jsx("li",{children:"如果我們知道我們數據X = x1...xn和Y大致是成線性變換關係, 當然使用線性回歸算法是合適的"}),e.jsx("li",{children:"只要我們假設X = x1....xn和Y是成線性變換的,就可以嘗試去使用線性回歸算法去擬合, 萬一合適呢?"})]})})]}),e.jsxs("div",{children:[e.jsx("p",{children:"使用幾元線性回歸"}),e.jsx("p",{className:"diagram",children:e.jsx("div",{className:"commentaryBox",children:e.jsx(r.PreviewGroup,{preview:{onChange:(s,i)=>console.log(`current index: ${s}, prev index: ${i}`)},children:e.jsx(r,{src:n.使用幾元的線性回歸,alt:"使用幾元的線性回歸"})})})})]}),e.jsxs("div",{children:[e.jsx("p",{children:"如何求解算法模型"}),e.jsx("p",{className:"diagram",children:e.jsx("div",{className:"commentaryBox",children:e.jsx(r.PreviewGroup,{preview:{onChange:(s,i)=>console.log(`current index: ${s}, prev index: ${i}`)},children:e.jsx(r,{src:n.求解算法模型,alt:"求解算法模型"})})})}),e.jsx("p",{className:"diagram",children:e.jsx("div",{className:"commentaryBox",children:e.jsx(r.PreviewGroup,{preview:{onChange:(s,i)=>console.log(`current index: ${s}, prev index: ${i}`)},children:e.jsx(r,{src:n.求解算法模型_01,alt:"求解算法模型_01"})})})}),e.jsx("p",{className:"diagram",children:e.jsx("div",{className:"commentaryBox",children:e.jsx(r.PreviewGroup,{preview:{onChange:(s,i)=>console.log(`current index: ${s}, prev index: ${i}`)},children:e.jsx(r,{src:n.求解算法模型_02,alt:"求解算法模型_02"})})})})]})]})]});export{x as default};
